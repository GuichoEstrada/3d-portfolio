/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Harri Snellman (https://sketchfab.com/rivetech)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/sci-fi-space-station-rotor-nexus-bed59d60b4c24c528737e3a505e124c5
Title: Sci-Fi Space Station: Rotor Nexus
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three';

import spaceStationScene from '../assets/3d/sci-fi_space_station_rotor_nexus.glb';

const SpaceStation = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {

    const { gl, viewport } = useThree();
    const spaceStationRef = useRef(0);
    const { nodes, materials } = useGLTF(spaceStationScene)
    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    // Handle pointer (mouse or touch) down event
    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        // Calculate the clientX based on whether it's a touch event or a mouse event
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // Store the current clientX position for reference
        lastX.current = clientX;
    };

    // Handle pointer (mouse or touch) up event
    const handlePointerUp = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(false);
    };

    // Handle pointer (mouse or touch) move event
    const handlePointerMove = (event) => {
        event.stopPropagation();
        event.preventDefault();
        if (isRotating) {
        // If rotation is enabled, calculate the change in clientX position
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // calculate the change in the horizontal position of the mouse cursor or touch input,
        // relative to the viewport's width
        const delta = (clientX - lastX.current) / viewport.width;

        // Update the space station's rotation based on the mouse/touch movement
        spaceStationRef.current.rotation.y += delta * 0.01 * Math.PI;

        // Update the reference for the last clientX position
        lastX.current = clientX;

        // Update the rotation speed
        rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    };

    // Handle keydown events
    const handleKeyDown = (event) => {
        if (event.key === "ArrowLeft") {
        if (!isRotating) setIsRotating(true);

        spaceStationRef.current.rotation.y += 0.005 * Math.PI;
        rotationSpeed.current = 0.0125;
        } else if (event.key === "ArrowRight") {
        if (!isRotating) setIsRotating(true);

        spaceStationRef.current.rotation.y -= 0.005 * Math.PI;
        rotationSpeed.current = -0.0125;
        }
    };

    // Handle keyup events
    const handleKeyUp = (event) => {
        if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
        setIsRotating(false);
        }
    };

    useEffect(() => {
        // Add event listeners for pointer and keyboard events
        const canvas = gl.domElement;
        canvas.addEventListener("pointerdown", handlePointerDown);
        canvas.addEventListener("pointerup", handlePointerUp);
        canvas.addEventListener("pointermove", handlePointerMove);
        window.addEventListener("keydown", handleKeyDown);
        window.addEventListener("keyup", handleKeyUp);
        // canvas.addEventListener("touchstart", handleTouchStart);
        // canvas.addEventListener("touchend", handleTouchEnd);
        // canvas.addEventListener("touchmove", handleTouchMove);
    
        // Remove event listeners when component unmounts
        return () => {
          canvas.removeEventListener("pointerdown", handlePointerDown);
          canvas.removeEventListener("pointerup", handlePointerUp);
          canvas.removeEventListener("pointermove", handlePointerMove);
          window.removeEventListener("keydown", handleKeyDown);
          window.removeEventListener("keyup", handleKeyUp);
        //   canvas.removeEventListener("touchstart", handleTouchStart);
        //   canvas.removeEventListener("touchend", handleTouchEnd);
        //   canvas.removeEventListener("touchmove", handleTouchMove);
        };
      }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
    

    // Apply event listeners
    useFrame(() => {
        // slow down
        if(!isRotating) {
            rotationSpeed.current *= dampingFactor;
            // stop moving
            if(Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            spaceStationRef.current.rotation.y += rotationSpeed.current;
        } else {
            const rotation = spaceStationRef.current.rotation.y;
            const normalizedRotation =
                ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            // Set the current stage based on the space station's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                setCurrentStage(4);
                break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                setCurrentStage(3);
                break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                setCurrentStage(2);
                break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                setCurrentStage(1);
                break;
                default:
                setCurrentStage(null);
            }
        }
    })

  return (
    <a.group {...props} ref={spaceStationRef}>
      <group scale={0.01}>
          <mesh
            geometry={nodes.SupportStructure_Beam1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            rotation={[0, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SpaceStationCore_SpaceStation_Core_0.geometry}
            material={materials.SpaceStation_Core}
          />
          <mesh
            geometry={nodes.TurbineShielding_SpaceStation_Core_0.geometry}
            material={materials.SpaceStation_Core}
          />
          <mesh
            geometry={nodes.SpaceStationCore_InnerTurbineWings_SpaceStation_Core_0.geometry}
            material={materials.SpaceStation_Core}
            position={[0, -0.945, 0]}
            rotation={[-Math.PI, 0.025, -Math.PI]}
          />
          <mesh
            geometry={nodes.SpaceStationCore_OuterTurbineWings_SpaceStation_Core_0.geometry}
            material={materials.SpaceStation_Core}
            position={[0, -0.317, 0]}
            rotation={[-Math.PI, 1.558, -Math.PI]}
          />
          <mesh
            geometry={nodes.SupportStructure_Beam4_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            rotation={[-Math.PI, 0, -Math.PI]}
          />
          <mesh
            geometry={nodes.SupportStructure_Beam3_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            rotation={[0, Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SupportStructure_Beam2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
          />
          <mesh
            geometry={nodes.SpaceStationParts_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short1_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short4_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short3_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short2_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long4_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short4_4_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short4_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long4_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short4_3_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[134.703, 0, 0]}
            rotation={[0.325, -Math.PI / 2, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long1_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short1_4_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short1_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long1_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short1_3_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, -134.703]}
            rotation={[0, 0, -0.325]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long3_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short3_4_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short3_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long3_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short3_3_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[0, 0, 134.703]}
            rotation={[-Math.PI, 0, 2.817]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long2_2_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short2_4_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short2_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Long2_1_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
          <mesh
            geometry={nodes.SurfaceBraces_Short2_3_SpaceStation_Parts_0.geometry}
            material={materials.SpaceStation_Parts}
            position={[-134.703, 0, 0]}
            rotation={[-0.325, 1.571, 0]}
          />
        </group>
    </a.group>
  )
}

export default SpaceStation;